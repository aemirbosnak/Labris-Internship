{
	"info": {
		"_postman_id": "01d894c7-e01a-44f5-9ce9-f62485de4564",
		"name": "Todoist Positive Scenarios",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Projects Testing",
			"item": [
				{
					"name": "Get all projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "37772528-f5ea-4ee0-8441-8ba7bda9326e",
								"exec": [
									"// Ensure that the comment_count property is a number and greater than or equal to 0.",
									"pm.test(\"Each project has a non-negative comment count\", function () {",
									"    var projects = pm.response.json();",
									"",
									"    projects.forEach(function (project) {",
									"        pm.expect(project.comment_count).to.be.a('number').and.to.be.at.least(0);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7ce06b04-8481-4850-a0a9-547194ff5608",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{todoist_url}}/projects"
					},
					"response": []
				},
				{
					"name": "Create project",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cf8a218b-72ff-4de7-b825-bc47df8bc4b9",
								"exec": [
									"let response = pm.response.json();",
									"",
									"pm.collectionVariables.set(\"project_id\", response.id);",
									"",
									"pm.test(\"Response has a valid project ID\", function () {",
									"    pm.expect(pm.response.json().id).to.exist.and.to.be.a('string');",
									"});",
									"",
									"pm.test(\"Project ID is stored in collection variable\", function () {",
									"    pm.collectionVariables.get(\"project_id\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "dae58274-b523-4ebe-941f-3aa28db8af49",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Task Tests\",\n    \"color\": \"sky_blue\",\n    \"is_favorite\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{todoist_url}}/projects"
					},
					"response": []
				},
				{
					"name": "Get a project",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "50ec7a2d-abc7-4309-9dd7-1dbf27b9f80b",
								"exec": [
									"pm.test(\"Project id is correct\", function () {",
									"    pm.expect(pm.response.json().id).to.equal(pm.variables.get(\"project_id\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4855ce2c-49d1-4573-ae16-1d92179cfdd1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{todoist_url}}/projects/{{project_id}}"
					},
					"response": []
				},
				{
					"name": "Update project",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f452bd69-5cec-4ead-b24a-394fbd0d1cfa",
								"exec": [
									"pm.test(\"Verify that the updated attributes in the response match the request\", function () {",
									"    var requestJSON = JSON.parse(pm.request.body.raw);",
									"    var responseJSON = pm.response.json();",
									"",
									"    // Iterate over the properties of the request JSON",
									"    for (var key in requestJSON) {",
									"        // Check if the key is present in both request and response JSON",
									"        if (requestJSON.hasOwnProperty(key) && responseJSON.hasOwnProperty(key)) {",
									"            // Compare the attribute in the response with the request",
									"            pm.expect(responseJSON[key]).to.eql(requestJSON[key]);",
									"        }",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1a5c75a0-8166-4911-bf89-58f25441c1a9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"my_project\",\n    \"color\": \"green\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{todoist_url}}/projects/{{project_id}}"
					},
					"response": []
				},
				{
					"name": "Delete project",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5bcd21e3-f5ca-47df-a044-315eba11511b",
								"exec": [
									"// Clear collection variable",
									"pm.collectionVariables.unset(\"project_id\");",
									"",
									"// Check if reponse body is empty",
									"pm.test(\"Verify that the response body is empty\", function () {",
									"    pm.expect(pm.response.text()).to.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "73fb5cc0-7ab4-4568-8d4e-62fc56c9eec3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{todoist_url}}/projects/{{project_id}}"
					},
					"response": []
				}
			],
			"id": "dc950de8-8b61-4660-8083-58b7909a1e18",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "522a4d27-005f-417b-96c3-016cb35172d7",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b0d2d915-7067-4cd5-9391-98710d3ae23a",
						"type": "text/javascript",
						"exec": [
							"const projectSchema = {",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"        \"id\": { \"type\": \"string\" },",
							"        \"parent_id\": { \"type\": [\"null\", \"string\"] },",
							"        \"order\": { \"type\": \"number\" },",
							"        \"color\": { \"type\": \"string\" },",
							"        \"name\": { \"type\": \"string\" },",
							"        \"comment_count\": { \"type\": \"number\" },",
							"        \"is_shared\": { \"type\": \"boolean\" },",
							"        \"is_favorite\": { \"type\": \"boolean\" },",
							"        \"is_inbox_project\": { \"type\": \"boolean\" },",
							"        \"is_team_inbox\": { \"type\": \"boolean\" },",
							"        \"url\": { \"type\": \"string\" },",
							"        \"view_style\": { \"type\": \"string\" }",
							"    },",
							"    \"required\": [\"id\", \"order\", \"color\", \"name\", \"comment_count\", \"is_shared\", \"is_favorite\", \"is_inbox_project\", \"is_team_inbox\", \"url\", \"view_style\"]",
							"};",
							"",
							"// Test to check the response body structure for Project object",
							"if (pm.request.method === 'GET' || pm.request.method === 'POST') {",
							"    pm.test(\"Response body structure is valid\", function () {",
							"        var responseJSON = pm.response.json();",
							"",
							"        // Define the JSON schema for the expected response structure of an array of project objects",
							"        const arrayProjectSchema = {",
							"            \"type\": \"array\",",
							"            \"items\": projectSchema",
							"        };",
							"",
							"        // If the response is an array, check the entire array against the schema",
							"        if (Array.isArray(responseJSON)) {",
							"            // Check if the response has a valid JSON body",
							"            pm.expect(responseJSON).to.be.jsonSchema(arrayProjectSchema);",
							"        }",
							"        // If the response is a single project object, check its structure and types directly",
							"        else if (typeof responseJSON === 'object') {",
							"            // Check if the response has a valid JSON body",
							"            pm.expect(responseJSON).to.be.jsonSchema(projectSchema);",
							"        }",
							"        // If the response is neither an object nor an array, the test will fail",
							"        else {",
							"            pm.expect.fail(\"Invalid response format. Expected an object or an array.\");",
							"        }",
							"    });",
							"}",
							""
						]
					}
				}
			]
		},
		{
			"name": "Sections Testing",
			"item": [
				{
					"name": "Create section",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "91a0c1c8-ba43-4577-ae26-09a9dd51dcff",
								"exec": [
									"let response = pm.response.json();",
									"",
									"pm.collectionVariables.set(\"section_id\", response.id);",
									"",
									"pm.test(\"Response has a valid section ID\", function () {",
									"    pm.expect(pm.response.json().id).to.exist.and.to.be.a('string');",
									"});",
									"",
									"pm.test(\"Section ID is stored in collection variable\", function () {",
									"    pm.collectionVariables.get(\"section_id\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9014f7d2-fcf8-47ea-a29e-1139eddda22c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"project_id\": {{project_id}},\n    \"name\": \"my_section\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{todoist_url}}/sections"
					},
					"response": []
				},
				{
					"name": "Get all sections",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7ac323d-1fd6-4b1d-9fb3-943ad4d9eee5",
								"exec": [
									"// Ensure that the order property is a number and greater than 0.",
									"pm.test(\"Each section has a non-negative order number\", function () {",
									"    var sections = pm.response.json();",
									"",
									"    sections.forEach(function (section) {",
									"        pm.expect(section.order).to.be.a('number').and.to.be.at.least(1);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c6ef91c8-bd32-4641-8af3-84567aeb63ff",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{todoist_url}}/sections?project_id={{project_id}}",
							"host": [
								"{{todoist_url}}"
							],
							"path": [
								"sections"
							],
							"query": [
								{
									"key": "project_id",
									"value": "{{project_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a section",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3afe1d1c-0ab4-48c7-ba37-31f3e416919b",
								"exec": [
									"pm.test(\"Section id is correct\", function () {",
									"    pm.expect(pm.response.json().id).to.equal(pm.variables.get(\"section_id\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "fbb3c62b-9336-48cc-a924-ab19b9968fce",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{todoist_url}}/sections/{{section_id}}"
					},
					"response": []
				},
				{
					"name": "Update section",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "52f5c11d-d418-4d8e-87f8-b157bc285b80",
								"exec": [
									"pm.test(\"Verify that the updated attributes in the response match the request\", function () {",
									"    var requestJSON = JSON.parse(pm.request.body.raw);",
									"    var responseJSON = pm.response.json();",
									"",
									"    // Iterate over the properties of the request JSON",
									"    for (var key in requestJSON) {",
									"        // Check if the key is present in both request and response JSON",
									"        if (requestJSON.hasOwnProperty(key) && responseJSON.hasOwnProperty(key)) {",
									"            // Compare the attribute in the response with the request",
									"            pm.expect(responseJSON[key]).to.eql(requestJSON[key]);",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3f79f5df-900e-466a-b75a-5feebf4b981c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"api testing\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{todoist_url}}/sections/{{section_id}}"
					},
					"response": []
				},
				{
					"name": "Delete section",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ceb3a1e9-7d25-4bbf-9fb4-a0e3e0aded80",
								"exec": [
									"// Clear collection variable",
									"pm.collectionVariables.unset(\"section_id\");",
									"",
									"// Check if reponse body is empty",
									"pm.test(\"Verify that the response body is empty\", function () {",
									"    pm.expect(pm.response.text()).to.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2ec97ae1-b76a-4142-845b-ea51fde272f2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{todoist_url}}/sections/{{section_id}}"
					},
					"response": []
				}
			],
			"id": "6e0f5e89-50e0-4eb3-8e57-075a560a6224",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3d4d42b3-72f4-4f18-8df0-35898929eba2",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "1ccde8ee-9d36-41c1-98f4-5e0bf8531f18",
						"type": "text/javascript",
						"exec": [
							"// Common schema for Section object",
							"const sectionSchema = {",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"        \"id\": { \"type\": \"string\" },",
							"        \"project_id\": { \"type\": \"string\" },",
							"        \"order\": { \"type\": \"number\" },",
							"        \"name\": { \"type\": \"string\" }",
							"    },",
							"    \"required\": [\"id\", \"project_id\", \"order\", \"name\"]",
							"};",
							"",
							"// Test to check the response body structure for Section object",
							"if (pm.request.method === 'GET' || pm.request.method === 'POST') {",
							"    pm.test(\"Response body structure is valid\", function () {",
							"        var responseJSON = pm.response.json();",
							"",
							"        // Define the JSON schema for the expected response structure of an array of section objects",
							"        const arraySectionSchema = {",
							"            \"type\": \"array\",",
							"            \"items\": sectionSchema",
							"        };",
							"",
							"        // If the response is an array, check the entire array against the schema",
							"        if (Array.isArray(responseJSON)) {",
							"            // Check if the response has a valid JSON body",
							"            pm.expect(responseJSON).to.be.jsonSchema(arraySectionSchema);",
							"        }",
							"        // If the response is a single section object, check its structure and types directly",
							"        else if (typeof responseJSON === 'object') {",
							"            // Check if the response has a valid JSON body",
							"            pm.expect(responseJSON).to.be.jsonSchema(sectionSchema);",
							"        }",
							"        // If the response is neither an object nor an array, the test will fail",
							"        else {",
							"            pm.expect.fail(\"Invalid response format. Expected an object or an array.\");",
							"        }",
							"    });",
							"}",
							""
						]
					}
				}
			]
		},
		{
			"name": "Tasks Testing",
			"item": [
				{
					"name": "Get active tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e7536fed-a230-4488-9108-cef8966c9caf",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9cb895c3-3345-4a67-a10d-98874a063166",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{todoist_url}}/tasks"
					},
					"response": []
				},
				{
					"name": "Create task",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7c2cd65a-2059-4840-8d65-5fcd9d9c1c8f",
								"exec": [
									"let response = pm.response.json();",
									"",
									"pm.collectionVariables.set(\"task_id\", response.id);",
									"",
									"pm.test(\"Response has a valid task ID\", function () {",
									"    pm.expect(pm.response.json().id).to.exist.and.to.be.a('string');",
									"});",
									"",
									"pm.test(\"Task ID is stored in collection variable\", function () {",
									"    pm.collectionVariables.get(\"task_id\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ed60e65d-2b6d-41b8-9516-6e3d86de6151",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content\": \"learn to write api tests\",\n    \"project_id\": {{project_id}},\n    \"section_id\": {{section_id}},\n    \"due_string\": \"Today at 17.00\",\n    \"priority\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{todoist_url}}/tasks"
					},
					"response": []
				},
				{
					"name": "Get an active task",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2bcd7b2a-146f-4351-affa-2580043f1e59",
								"exec": [
									"pm.test(\"Task id is correct\", function () {",
									"    pm.expect(pm.response.json().id).to.equal(pm.variables.get(\"task_id\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "81ddd6ec-8d45-4870-8055-3760b139e3f5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{todoist_url}}/tasks/{{task_id}}"
					},
					"response": []
				},
				{
					"name": "Update task",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ea196188-4505-46a6-bedd-5076324a664b",
								"exec": [
									"pm.test(\"Verify that the updated attributes in the response match the request\", function () {",
									"    var requestJSON = JSON.parse(pm.request.body.raw);",
									"    var responseJSON = pm.response.json();",
									"",
									"    // Iterate over the properties of the request JSON",
									"    for (var key in requestJSON) {",
									"        // Check if the key is present in both request and response JSON",
									"        if (requestJSON.hasOwnProperty(key) && responseJSON.hasOwnProperty(key)) {",
									"            // Compare the attribute in the response with the request",
									"            pm.expect(responseJSON[key]).to.eql(requestJSON[key]);",
									"        }",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "09c046cc-779d-49c0-899c-b79b42cf82cb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"due_string\": \"Today at 16.30\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{todoist_url}}/tasks/{{task_id}}"
					},
					"response": []
				},
				{
					"name": "Close task",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "23259dbd-12eb-41fc-bec3-1cc36262a1f3",
								"exec": [
									"pm.test(\"Task marked complete. Status code is 204. No Content\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "eac4c157-80b9-4819-b2af-73d9133ee86d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"url": "{{todoist_url}}/tasks/{{task_id}}/close"
					},
					"response": []
				},
				{
					"name": "Reopen task",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "da0ecbc9-7f20-4746-beb6-62ac25c6eb35",
								"exec": [
									"pm.test(\"Task reopened. Status code is 204. No Content.\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d08cba80-a2d9-485f-9b24-4b7b5a0194c7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"url": "{{todoist_url}}/tasks/{{task_id}}/reopen"
					},
					"response": []
				},
				{
					"name": "Delete task",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "963d97ef-c690-4f3b-8fc2-a957d8647010",
								"exec": [
									"// Clear collection variable",
									"pm.collectionVariables.unset(\"task_id\");",
									"",
									"// Check if reponse body is empty",
									"pm.test(\"Verify that the response body is empty\", function () {",
									"    pm.expect(pm.response.text()).to.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b9ca6c3b-5ad5-4379-bf7e-b3ee8c7da935",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{todoist_url}}/tasks/{{task_id}}"
					},
					"response": []
				}
			],
			"id": "4b6dc908-b784-41b8-af45-243f2a0723cd",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "623ba7fa-2325-4477-94b1-e9d9968acb00",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "f9e3c52a-80f7-4b0c-97c0-015f4414c3a2",
						"type": "text/javascript",
						"exec": [
							"// Test to check the response body structure for Project object",
							"if (pm.request.method === 'GET' || pm.request.method === 'POST') {",
							"    pm.test(\"Response body structure is valid\", function () {",
							"        var responseJSON = pm.response.json();",
							"",
							"        // If the response is an array, check each project object in the array",
							"        if (Array.isArray(responseJSON)) {",
							"            responseJSON.forEach(function (project) {",
							"                pm.expect(project).to.be.an('object').that.has.all.keys(",
							"                    'id', 'project_id', 'section_id', 'content', 'description',",
							"                    'is_completed', 'labels', 'parent_id', 'order',",
							"                    'priority', 'due', 'url', 'comment_count',",
							"                    'created_at', 'creator_id', 'assignee_id',",
							"                    'assigner_id', 'duration'",
							"                );",
							"            });",
							"        }",
							"        // If the response is a single project object, check its structure and types directly",
							"        else if (typeof responseJSON === 'object') {",
							"            pm.expect(responseJSON).to.be.an('object').that.has.all.keys(",
							"                'id', 'project_id', 'section_id', 'content', 'description',",
							"                'is_completed', 'labels', 'parent_id', 'order',",
							"                'priority', 'due', 'url', 'comment_count',",
							"                'created_at', 'creator_id', 'assignee_id',",
							"                'assigner_id', 'duration'",
							"            );",
							"        }",
							"        // If the response is neither an object nor an array, the test will fail",
							"        else {",
							"            pm.expect.fail(\"Invalid response format. Expected an object or an array.\");",
							"        }",
							"    });",
							"}"
						]
					}
				}
			]
		},
		{
			"name": "Comments Testing",
			"item": [
				{
					"name": "Get all comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "77bc1123-5e81-42b6-9e76-07b0b15ba47a",
								"exec": [
									"// Ensure that the content property is not empty",
									"pm.test(\"Each comment is not empty\", function () {",
									"    var comments = pm.response.json();",
									"",
									"    comments.forEach(function (comment) {",
									"        pm.expect(comment.content).to.be.a('string');",
									"        pm.expect(comment.content).to.not.be.null;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "45740ca5-2c1d-4242-b393-fbbebf2aef09",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{todoist_url}}/comments?task_id=7085436412",
							"host": [
								"{{todoist_url}}"
							],
							"path": [
								"comments"
							],
							"query": [
								{
									"key": "task_id",
									"value": "7085436412"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "389049ad-f3ef-4051-854b-19f603c644be",
								"exec": [
									"let response = pm.response.json();",
									"",
									"pm.collectionVariables.set(\"comment_id\", response.id);",
									"",
									"pm.test(\"Response has a valid comment ID\", function () {",
									"    pm.expect(pm.response.json().id).to.exist.and.to.be.a('string');",
									"});",
									"",
									"pm.test(\"Comment ID is stored in collection variable\", function () {",
									"    pm.collectionVariables.get(\"comment_id\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "abf27f30-ed2a-4cbd-ba73-be7bcf89d136",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"task_id\": {{task_id}},\n    \"content\": \"need to speed up\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{todoist_url}}/comments"
					},
					"response": []
				},
				{
					"name": "Get comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6199a531-83ea-4365-98db-691affc336d9",
								"exec": [
									"pm.test(\"Comment id is correct\", function () {",
									"    pm.expect(pm.response.json().id).to.equal(pm.variables.get(\"comment_id\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0be88253-8514-439f-bc71-9634eab121a3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{todoist_url}}/comments/{{comment_id}}"
					},
					"response": []
				},
				{
					"name": "Update comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6a8e87dd-e277-403b-8e89-f3d07a70646d",
								"exec": [
									"pm.test(\"Verify that the updated attributes in the response match the request\", function () {",
									"    var requestJSON = JSON.parse(pm.request.body.raw);",
									"    var responseJSON = pm.response.json();",
									"",
									"    // Iterate over the properties of the request JSON",
									"    for (var key in requestJSON) {",
									"        // Check if the key is present in both request and response JSON",
									"        if (requestJSON.hasOwnProperty(key) && responseJSON.hasOwnProperty(key)) {",
									"            // Compare the attribute in the response with the request",
									"            pm.expect(responseJSON[key]).to.eql(requestJSON[key]);",
									"        }",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ae03ea2a-822b-4858-a475-c12b23e8e95f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content\": \"time is running out\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{todoist_url}}/comments/{{comment_id}}"
					},
					"response": []
				},
				{
					"name": "Delete comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8e1fb507-e11a-4ef4-b49b-b3a0fa29183a",
								"exec": [
									"// Clear collection variable",
									"pm.collectionVariables.unset(\"comment_id\");",
									"",
									"// Check if reponse body is empty",
									"pm.test(\"Verify that the response body is empty\", function () {",
									"    pm.expect(pm.response.text()).to.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ecdbc9da-11d7-4a5a-b0ae-95bb58158f89",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{todoist_url}}/comments/{{comment_id}}"
					},
					"response": []
				}
			],
			"id": "46e89983-a25e-47da-b56c-15368f3f9289",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "04ce5f2d-99f5-4f89-b4ce-47d8a3ee5826",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "6743e475-0ab7-4a8c-be0d-ae4539ac989e",
						"type": "text/javascript",
						"exec": [
							"// Common schema for Comment and Project object",
							"const commentSchema = {",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"        \"id\": { \"type\": \"string\" },",
							"        \"task_id\": { \"type\": [\"null\", \"string\"] },",
							"        \"project_id\": { \"type\": [\"null\", \"string\"] },",
							"        \"posted_at\": { \"type\": \"string\" },",
							"        \"content\": { \"type\": \"string\" },",
							"        \"attachment\": { \"type\": [\"null\", \"object\"] }",
							"    },",
							"    \"required\": [\"id\", \"task_id\", \"project_id\", \"posted_at\", \"content\", \"attachment\"]",
							"};",
							"",
							"// Test to check the response body structure for Comment object",
							"if (pm.request.method === 'GET' || pm.request.method === 'POST') {",
							"    pm.test(\"Response body structure is valid\", function () {",
							"        var responseJSON = pm.response.json();",
							"",
							"        // Define the JSON schema for the expected response structure of an array of comment objects",
							"        const arrayCommentSchema = {",
							"            \"type\": \"array\",",
							"            \"items\": commentSchema",
							"        };",
							"",
							"        // If the response is an array, check the entire array against the schema",
							"        if (Array.isArray(responseJSON)) {",
							"            // Check if the response has a valid JSON body",
							"            pm.expect(responseJSON).to.be.jsonSchema(arrayCommentSchema);",
							"        }",
							"        // If the response is a single comment object, check its structure and types directly",
							"        else if (typeof responseJSON === 'object') {",
							"            // Check if the response has a valid JSON body",
							"            pm.expect(responseJSON).to.be.jsonSchema(commentSchema);",
							"        }",
							"        // If the response is neither an object nor an array, the test will fail",
							"        else {",
							"            pm.expect.fail(\"Invalid response format. Expected an object or an array.\");",
							"        }",
							"    });",
							"}",
							""
						]
					}
				}
			]
		},
		{
			"name": "Labels Testing",
			"item": [
				{
					"name": "Get all labels",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d55012d8-78e8-44c5-94a2-02fe3c36811c",
								"exec": [
									"// Ensure that the name property is not empty",
									"pm.test(\"Each label is not empty\", function () {",
									"    var labels = pm.response.json();",
									"",
									"    labels.forEach(function (label) {",
									"        pm.expect(label.name).to.be.a('string');",
									"        pm.expect(label.name).to.not.be.null;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9c00bebd-11cb-46ef-9f29-52f7dd37aa9d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{todoist_url}}/labels"
					},
					"response": []
				},
				{
					"name": "Create label",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8b2b909a-08aa-4a58-81d2-41c2ba3d8cbf",
								"exec": [
									"let response = pm.response.json();",
									"",
									"pm.collectionVariables.set(\"label_id\", response.id);",
									"",
									"pm.test(\"Response has a valid label ID\", function () {",
									"    pm.expect(pm.response.json().id).to.exist.and.to.be.a('string');",
									"});",
									"",
									"pm.test(\"Label ID is stored in collection variable\", function () {",
									"    pm.collectionVariables.get(\"label_id\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "46c16440-6940-416b-b8f2-99567561b629",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Labris\",\n    \"color\": \"blue\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{todoist_url}}/labels"
					},
					"response": []
				},
				{
					"name": "Get label",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "130fde4b-b1f5-41ef-89b3-27e89b96c536",
								"exec": [
									"pm.test(\"Label id is correct\", function () {",
									"    pm.expect(pm.response.json().id).to.equal(pm.variables.get(\"label_id\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "59b8e50a-b1d4-41ba-a4d1-a085df7bc93a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{todoist_url}}/labels/{{label_id}}"
					},
					"response": []
				},
				{
					"name": "Update label",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4a88f0c7-4b7b-416e-9f70-d9bf8da0d450",
								"exec": [
									"pm.test(\"Verify that the updated attributes in the response match the request\", function () {",
									"    var requestJSON = JSON.parse(pm.request.body.raw);",
									"    var responseJSON = pm.response.json();",
									"",
									"    // Iterate over the properties of the request JSON",
									"    for (var key in requestJSON) {",
									"        // Check if the key is present in both request and response JSON",
									"        if (requestJSON.hasOwnProperty(key) && responseJSON.hasOwnProperty(key)) {",
									"            // Compare the attribute in the response with the request",
									"            pm.expect(responseJSON[key]).to.eql(requestJSON[key]);",
									"        }",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3c3b511d-ca40-4795-97c7-f153e0223811",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"order\": 1,\n    \"color\": \"blue\"    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{todoist_url}}/labels/{{label_id}}"
					},
					"response": []
				},
				{
					"name": "Delete label",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "184c0f1e-b4fb-4c69-b94c-fdd589fbd53e",
								"exec": [
									"// Clear collection variable",
									"pm.collectionVariables.unset(\"label_id\");",
									"",
									"// Check if reponse body is empty",
									"pm.test(\"Verify that the response body is empty\", function () {",
									"    pm.expect(pm.response.text()).to.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "41338abe-1db4-40ba-bd5e-a3d2bbb5e49c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{todoist_url}}/labels/{{label_id}}"
					},
					"response": []
				}
			],
			"id": "64539a59-ee0d-4f04-bc97-c96e32976164",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "78e5a5bd-4b05-417e-a5b2-c24d463c36eb",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "1edc19c6-50f9-432a-8ab7-e2296e9ff2f5",
						"type": "text/javascript",
						"exec": [
							"// Common schema for Label object",
							"const labelSchema = {",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"        \"id\": { \"type\": \"string\" },",
							"        \"name\": { \"type\": \"string\" },",
							"        \"color\": { \"type\": \"string\" },",
							"        \"order\": { \"type\": \"number\" },",
							"        \"is_favorite\": { \"type\": \"boolean\" }",
							"    },",
							"    \"required\": [\"id\", \"name\", \"color\", \"order\", \"is_favorite\"]",
							"};",
							"",
							"// Test to check the response body structure for Label object",
							"if (pm.request.method === 'GET' || pm.request.method === 'POST') {",
							"    pm.test(\"Response body structure is valid\", function () {",
							"        var responseJSON = pm.response.json();",
							"",
							"        // Define the JSON schema for the expected response structure of an array of label objects",
							"        const arrayLabelSchema = {",
							"            \"type\": \"array\",",
							"            \"items\": labelSchema",
							"        };",
							"",
							"        // If the response is an array, check the entire array against the schema",
							"        if (Array.isArray(responseJSON)) {",
							"            // Check if the response has a valid JSON body",
							"            pm.expect(responseJSON).to.be.jsonSchema(arrayLabelSchema);",
							"        }",
							"        // If the response is a single comment object, check its structure and types directly",
							"        else if (typeof responseJSON === 'object') {",
							"            // Check if the response has a valid JSON body",
							"            pm.expect(responseJSON).to.be.jsonSchema(labelSchema);",
							"        }",
							"        // If the response is neither an object nor an array, the test will fail",
							"        else {",
							"            pm.expect.fail(\"Invalid response format. Expected an object or an array.\");",
							"        }",
							"    });",
							"}",
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": "{{api_token}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "f13fadef-85ab-4fab-a663-4494cc111ec5",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "176c8dbf-0f2e-47c8-8401-bc8ccdc3b6fb",
				"type": "text/javascript",
				"exec": [
					"// Test for response status code of 200 or 204",
					"pm.test(\"Response status code is 200 or 204\", function () {",
					"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
					"});",
					"",
					"// Check that the response time is within an acceptable range.",
					"pm.test(\"Response time is less than 1000ms\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(1000);",
					"});"
				]
			}
		}
	]
}